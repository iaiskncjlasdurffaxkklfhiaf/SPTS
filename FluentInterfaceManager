local httpService = game:GetService("HttpService")

local InterfaceManager = {}
InterfaceManager.__index = InterfaceManager

function InterfaceManager.new()
    local self = setmetatable({}, InterfaceManager)
    self.Folder = "FluentSettings"
    self.Settings = {
        Theme = "Dark",
        Acrylic = true,
        Transparency = true,
        MenuKeybind = "LeftControl"
    }
    return self
end

function InterfaceManager:SetFolder(self, folder)
    self.Folder = folder
    self:BuildFolderTree()
end

function InterfaceManager:SetLibrary(self, library)
    self.Library = library
end

function InterfaceManager:BuildFolderTree(self)
    local paths = {}

    local parts = self.Folder:split("/")
    for idx = 1, #parts do
        paths[#paths + 1] = table.concat(parts, "/", 1, idx)
    end

    table.insert(paths, self.Folder)
    table.insert(paths, self.Folder.. "/settings")

    for i = 1, #paths do
        local str = paths[i]
        if not isfolder(str) then
            makefolder(str)
        end
    end
end

function InterfaceManager:SaveSettings(self)
    writefile(self.Folder.. "/options.json", httpService:JSONEncode(self.Settings))
end

function InterfaceManager:LoadSettings(self)
    local path = self.Folder.. "/options.json"
    if isfile(path) then
        local data = readfile(path)
        local success, decoded = pcall(httpService.JSONDecode, httpService, data)

        if success then
            for k, v in pairs(decoded) do
                self.Settings[k] = v
            end
        else
            warn("Failed to decode JSON:", decoded)
        end
    end
end

function InterfaceManager:BuildInterfaceSection(self, tab)
    assert(self.Library, "Must set InterfaceManager.Library")
    local Library = self.Library
    local Settings = self.Settings

    self:LoadSettings()

    local section = tab:AddSection("Interface")

    local InterfaceTheme = section:AddDropdown("InterfaceTheme", {
        Title = "Theme",
        Description = "Changes the interface theme.",
        Values = Library.Themes,
        Default = Settings.Theme,
        Callback = function(Value)
            Library:SetTheme(Value)
            Settings.Theme = Value
            self:SaveSettings()
        end
    })

    InterfaceTheme:SetValue(Settings.Theme)

    if Library.UseAcrylic then
        section:AddToggle("AcrylicToggle", {
            Title = "Acrylic",
            Description = "The blurred background requires graphic quality 8+",
            Default = Settings.Acrylic,
            Callback = function(Value)
                Library:ToggleAcrylic(Value)
                Settings.Acrylic = Value
                self:SaveSettings()
            end
        })
    end

    section:AddToggle("TransparentToggle", {
        Title = "Transparency",
        Description = "Makes the interface transparent.",
        Default = Settings.Transparency,
        Callback = function(Value)
            Library:ToggleTransparency(Value)
            Settings.Transparency = Value
            self:SaveSettings()
        end
    })

    local MenuKeybind = section:AddKeybind("MenuKeybind", { Title = "Minimize Bind", Default = Settings.MenuKeybind })
    MenuKeybind:OnChanged(function()
        Settings.MenuKeybind = MenuKeybind.Value
        self:SaveSettings()
    end)
    Library.MinimizeKeybind = MenuKeybind
end

return InterfaceManager
